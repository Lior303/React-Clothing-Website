{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from \"./user.types\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { User } from \"firebase\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); // put ---> puts things back into our regular redux flow\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // just like we did in App.js\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); // put ---> puts things back into our regular redux flow\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/Lior Vaknin/Desktop/project-2-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","User","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAAyC,oBAAzC;AAEA,SAAQC,eAAR,QAA8B,cAA9B;AACA,SACIC,aADJ,EAEIC,aAFJ,QAGO,gBAHP;AAKA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,QAA8D,+BAA9D;AACA,SAAQC,IAAR,QAAmB,UAAnB;AAEA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAArB;AACA,UAAMM,OAAO,GAAG,MAAMX,IAAI,CAACM,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHA,CAIA;;AACA,UAAMf,GAAG,CAACI,aAAa,CAAC;AACpBY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT,CALA,CAQK;AACR,GATD,CAUA,OAAOC,KAAP,EAAc;AACV,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMpB,UAAU,CAACI,eAAe,CAACiB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACH;AAGD,OAAO,UAAUW,eAAV,CAA0B;AAACC,EAAAA;AAAD,CAA1B,EAAqC;AACxC,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBF,OAA1B;;AACA,MAAG;AACC,UAAM;AAACX,MAAAA;AAAD,QAAS,MAAML,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMX,OAAO,GAAG,MAAMX,IAAI,CAACM,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHD,CAIC;;AACA,UAAMf,GAAG,CAACI,aAAa,CAAC;AACpBY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GATD,CAUA,OAAOC,KAAP,EAAc;AACV,UAAMlB,GAAG,CAACK,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AAClC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,mBAAjB,EAAsCN,eAAtC,CAAhB;AACH;AAID,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAM3B,GAAG,CAAC,CAACC,IAAI,CAACiB,mBAAD,CAAL,EAA4BjB,IAAI,CAACwB,kBAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\n\r\nimport {UserActionTypes} from \"./user.types\";\r\nimport {\r\n    signInSuccess,\r\n    signInFailure\r\n} from \"./user.actions\";\r\n\r\nimport {auth, googleProvider, createUserProfileDocument} from \"../../firebase/firebase.utils\";\r\nimport {User} from \"firebase\";\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        // put ---> puts things back into our regular redux flow\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        })); // just like we did in App.js\r\n    }\r\n    catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\n\r\nexport function* signInWithEmail({payload}) {\r\n    const {email, password} = payload;\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        // put ---> puts things back into our regular redux flow\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n    }\r\n    catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\r\n}"]},"metadata":{},"sourceType":"module"}