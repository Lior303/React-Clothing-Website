{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from \"./user.types\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from \"./user.actions\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get(); // put ---> puts things back into our regular redux flow\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // just like we did in App.js\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* signUp(userInfo) {\n  const {\n    payload\n  } = userInfo;\n  const {\n    email,\n    password,\n    displayName\n  } = payload;\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user: user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* signInAfterSIgnUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSIgnUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Lior Vaknin/Desktop/project-2-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","userInfo","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","signInAfterSIgnUp","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\n\r\nimport {UserActionTypes} from \"./user.types\";\r\nimport {\r\n    signInSuccess,\r\n    signInFailure,\r\n    signOutSuccess,\r\n    signOutFailure,\r\n    signUpFailure,\r\n    signUpSuccess,\r\n} from \"./user.actions\";\r\n\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from \"../../firebase/firebase.utils\";\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        // put ---> puts things back into our regular redux flow\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        })); // just like we did in App.js\r\n    }\r\n    catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }\r\n    catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\n\r\nexport function* signInWithEmail({payload}) {\r\n    const {email, password} = payload;\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }\r\n    catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    }\r\n    catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    }\r\n    catch (error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* signUp(userInfo) {\r\n    const {payload} = userInfo;\r\n    const {email, password, displayName} = payload;\r\n\r\n    try {\r\n        const { user } = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n            password\r\n        );\r\n        yield put(signUpSuccess({user: user, additionalData: {displayName}}));\r\n    }\r\n    catch (error) {\r\n        yield put(signUpFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* signInAfterSIgnUp({payload: {user, additionalData}}) {\r\n    yield getSnapshotFromUserAuth(user, additionalData);\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSIgnUp);\r\n}\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}