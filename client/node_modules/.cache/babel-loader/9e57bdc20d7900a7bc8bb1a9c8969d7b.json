{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot); // put is a saga effect from creating actions\n    // just like dispatch\n\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  // this saga is listening to FETCH_COLLECTIONS_START action to take place\n  // when it does take place it invoke fetchCollectionsAsync this function\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([fetchCollectionsStart]);\n}","map":{"version":3,"sources":["C:/Users/Lior Vaknin/Desktop/project-2-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAAyC,oBAAzC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,+BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,MAAI;AACA,UAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB;AAEA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAAhC,CAJA,CAMA;AACA;;AAEA,UAAMV,GAAG,CAACK,uBAAuB,CAACO,aAAD,CAAxB,CAAT;AACH,GAVD,CAWA,OAAOC,KAAP,EAAc;AACV,UAAMb,GAAG,CAACM,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC;AACA;AACA,QAAMjB,UAAU,CACZI,eAAe,CAACc,uBADJ,EAEZT,qBAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMhB,GAAG,CAAC,CACPc,qBADO,CAAD,CAAT;AAGH","sourcesContent":["import {takeLatest, call, put, all} from 'redux-saga/effects';\r\n\r\nimport ShopActionTypes from './shop.types';\r\nimport {convertCollectionsSnapshotToMap, firestore} from \"../../firebase/firebase.utils\";\r\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from \"./shop.actions\";\r\n\r\nexport function* fetchCollectionsAsync() {\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n\r\n        // put is a saga effect from creating actions\r\n        // just like dispatch\r\n\r\n        yield put(fetchCollectionsSuccess(collectionMap));\r\n    }\r\n    catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    // this saga is listening to FETCH_COLLECTIONS_START action to take place\r\n    // when it does take place it invoke fetchCollectionsAsync this function\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionsAsync\r\n    );\r\n}\r\n\r\nexport function* shopSagas() {\r\n    yield all([\r\n       fetchCollectionsStart\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}